<div class="lines-container">
  <div class="line-card">
    <div class="line-title" style="text-align:center;">Котлы / Турбины / Итоги (сумма)</div>
    <div class="multi-legend" style="text-align:center;">
      <span class="sw sw-boilers"></span>Котлы
      <span class="sw sw-turbines" style="margin-left:14px;"></span>Турбины
      <span class="sw sw-total" style="margin-left:14px;"></span>Итоги
    </div>
    <svg id="line-multi" class="line-svg" viewBox="0 0 1000 420" preserveAspectRatio="xMidYMid meet"></svg>
  </div>
</div>
/* значки в легенде для многосерийного графика */
.sw-boilers{ background:#00d26a; }
.sw-turbines{ background:#ffd400; }
.sw-total{ background:#74c0ff; }
.multi-legend{
  color:#bdbdbd; font:12px/1 sans-serif;
  margin: 4px 0 6px;
}
.line-boilers{ stroke:#00d26a; fill:none; stroke-width:2.5; }
.line-turbines{ stroke:#ffd400; fill:none; stroke-width:2.5; }
.line-total{ stroke:#74c0ff; fill:none; stroke-width:2.8; }
.dot{ stroke:#111; stroke-width:1.5; }
.dot-boilers{ fill:#00d26a; }
.dot-turbines{ fill:#ffd400; }
.dot-total{ fill:#74c0ff; }
.axis path, .axis line{ stroke:#555; }
.axis text{ fill:#bdbdbd; font:12px sans-serif; }
.grid line{ stroke:#2f2f2f; }
.grid .domain{ stroke:none; }
// Один большой график с тремя сериями
function drawMultiLine(svgId, seriesDefs){
  const svg = d3.select('#'+svgId);
  svg.selectAll('*').remove();

  const W = 1000, H = 420;
  const m = {top: 28, right: 24, bottom: 48, left: 64};
  const innerW = W - m.left - m.right;
  const innerH = H - m.top - m.bottom;

  const x = d3.scalePoint()
    .domain(MONTHS)
    .range([0, innerW])
    .padding(0.5);

  const yMax = d3.max(seriesDefs.flatMap(s => s.values)) || 0;
  const y = d3.scaleLinear()
    .domain([0, yMax * 1.1]).nice()
    .range([innerH, 0]);

  const g = svg.append('g').attr('transform', `translate(${m.left},${m.top})`);

  // сетка и оси
  g.append('g').attr('class','grid')
    .call(d3.axisLeft(y).ticks(6).tickSize(-innerW).tickFormat(''));

  g.append('g').attr('class','axis')
    .call(d3.axisLeft(y).ticks(6).tickFormat(d => d3.format(',')(d).replace(/,/g,' ')));

  g.append('g').attr('class','axis')
    .attr('transform', `translate(0,${innerH})`)
    .call(d3.axisBottom(x).tickSize(0));

  const line = d3.line()
    .x((_,i)=> x(MONTHS[i]))
    .y(d => y(d))
    .curve(d3.curveMonotoneX);

  // сами линии
  seriesDefs.forEach(s => {
    g.append('path')
      .datum(s.values)
      .attr('class', s.lineClass)
      .attr('d', line);
  });

  // точки
  seriesDefs.forEach(s => {
    g.selectAll('.'+s.dotClass)
      .data(s.values.map((v,i)=> ({v,i})))
      .enter().append('circle')
        .attr('class', `dot ${s.dotClass}`)
        .attr('r', 4.5)
        .attr('cx', d=> x(MONTHS[d.i]))
        .attr('cy', d=> y(d.v));
  });

  // фокус: вертикальная линия + по одной крупной точке на серию
  const focusLine = g.append('line')
    .attr('y1', 0).attr('y2', innerH)
    .attr('stroke', '#4a4a4a').attr('stroke-dasharray', '4 4')
    .style('opacity', 0);

  const focusDots = seriesDefs.map(s =>
    g.append('circle')
      .attr('r', 6).attr('stroke','#fff').attr('stroke-width',2)
      .attr('fill', s.focusFill)
      .style('opacity', 0)
  );

  const tip = d3.select('#tooltip');

  // оверлей для ховера
  g.append('rect')
    .attr('x', 0).attr('y', 0)
    .attr('width', innerW).attr('height', innerH)
    .attr('fill', 'transparent')
    .on('mousemove', (event)=>{
      const [mx] = d3.pointer(event);
      // ближайший месяц
      let idx = 0, best = Infinity;
      for(let i=0;i<MONTHS.length;i++){
        const xi = x(MONTHS[i]);
        const d = Math.abs(mx - xi);
        if (d < best){ best = d; idx = i; }
      }
      const xv = x(MONTHS[idx]);

      focusLine.attr('x1',xv).attr('x2',xv).style('opacity',1);

      focusDots.forEach((dot, k)=>{
        const v = seriesDefs[k].values[idx];
        dot.attr('cx', xv).attr('cy', y(v)).style('opacity',1);
      });

      // тултип с тремя значениями
      const fmt = d3.format(',');
      const val = v => fmt(v).replace(/,/g,' ');
      tip.style('opacity',1)
         .style('left', (event.pageX + 12) + 'px')
         .style('top',  (event.pageY - 24) + 'px')
         .html(`
          <div style="font:12px sans-serif; color:#fff;">
            <div style="color:#bdbdbd; margin-bottom:4px;"><b>${MONTHS[idx]}</b></div>
            <div><span style="display:inline-block;width:10px;height:10px;background:#00d26a;border-radius:50%;margin-right:6px;"></span>Котлы: ${val(seriesDefs[0].values[idx])}</div>
            <div><span style="display:inline-block;width:10px;height:10px;background:#ffd400;border-radius:50%;margin-right:6px;"></span>Турбины: ${val(seriesDefs[1].values[idx])}</div>
            <div><span style="display:inline-block;width:10px;height:10px;background:#74c0ff;border-radius:50%;margin-right:6px;"></span><b>Итоги: ${val(seriesDefs[2].values[idx])}</b></div>
          </div>
         `);
    })
    .on('mouseleave', ()=>{
      focusLine.style('opacity',0);
      focusDots.forEach(dot => dot.style('opacity',0));
      tip.style('opacity',0);
    });
}

// ВЫЗОВ
drawMultiLine('line-multi', [
  { title:'Котлы',   values: SERIES_BOILERS,  lineClass:'line-boilers',  dotClass:'dot-boilers',  focusFill:'#00d26a' },
  { title:'Турбины', values: SERIES_TURBINES, lineClass:'line-turbines', dotClass:'dot-turbines', focusFill:'#ffd400' },
  { title:'Итоги',   values: SERIES_TOTAL,    lineClass:'line-total',    dotClass:'dot-total',    focusFill:'#74c0ff' },
]);
