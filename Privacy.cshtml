function drawGauge(svgId, value, {start=-Math.PI/2, end=Math.PI/2} = {}){
  const svg = d3.select('#'+svgId);
  svg.selectAll('*').remove();

  // Геометрия
  const W = 320, H = 180;
  const cx = W/2;
  const rOuter = (W/2) - 1;
  const thickness = 28;
  const rInner = rOuter - thickness;
  const cy = rOuter + 10;

  // Кламп значения
  const v = Math.max(0, Math.min(100, value));

  // --- градиент: умная ориентация ---
  const defs = svg.append('defs');
  const gradId = `grad-${svgId}`;

  // Критические углы для экстремумов по X/Y
  const inRange = (a,b,x)=> (a<=x && x<=b);
  const AX = [start, end];                       // для X — кандидаты: start,end, 0, π
  if (inRange(start,end,0))   AX.push(0);
  if (inRange(start,end,Math.PI)) AX.push(Math.PI);

  const AY = [start, end];                       // для Y — кандидаты: start,end, -π/2, π/2
  if (inRange(start,end,-Math.PI/2)) AY.push(-Math.PI/2);
  if (inRange(start,end, Math.PI/2)) AY.push( Math.PI/2);

  const xs = AX.map(a => cx + rOuter*Math.cos(a));
  const ys = AY.map(a => cy + rOuter*Math.sin(a));
  const minX = Math.min(...xs), maxX = Math.max(...xs);
  const minY = Math.min(...ys), maxY = Math.max(...ys);

  const g = defs.append('linearGradient')
    .attr('id', gradId)
    .attr('gradientUnits','userSpaceOnUse');

  // Если дуга «узкая» по X (как правая/левая полудуга) — делаем вертикальный градиент
  if (Math.abs(maxX - minX) < 1e-3){
    g.attr('x1', cx).attr('y1', minY)
     .attr('x2', cx).attr('y2', maxY);
  } else {
    // Иначе — горизонтальный
    g.attr('x1', minX).attr('y1', cy)
     .attr('x2', maxX).attr('y2', cy);
  }

  g.append('stop').attr('offset','0%').attr('stop-color','#ff2d2d');   // красный
  g.append('stop').attr('offset','50%').attr('stop-color','#ffd400');  // жёлтый
  g.append('stop').attr('offset','100%').attr('stop-color','#00d26a'); // зелёный

  // Шкала угла
  const scale = d3.scaleLinear().domain([0,100]).range([start, end]);

  // Фон дуги
  svg.append('g').attr('transform', `translate(${cx},${cy})`)
    .append('path')
      .attr('d', d3.arc().innerRadius(rInner).outerRadius(rOuter).startAngle(start).endAngle(end))
      .attr('fill', '#3a3a3a');

  // Значение (дуга с градиентом)
  svg.append('g').attr('transform', `translate(${cx},${cy})`)
    .append('path')
      .attr('d', d3.arc().innerRadius(rInner).outerRadius(rOuter).startAngle(start).endAngle(scale(v)))
      .attr('fill', `url(#${gradId})`);

  // (опционально) число в центре — можно убрать, если не нужно
  svg.append('text')
    .attr('x', cx).attr('y', cy - 10)
    .attr('text-anchor','middle').attr('fill','#fff')
    .attr('font-family','sans-serif').attr('font-size','28px').attr('font-weight','700')
    .text(`${Math.round(v)}%`);
}
