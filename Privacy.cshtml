<style>
  /* Ряд со спидометрами */
.gauges-container{
  flex: 1 1 auto;
  display: flex;
  gap: 16px;
  align-items: flex-start;
  justify-content: center;
  padding: 8px 10px;
  box-sizing: border-box;
  flex-wrap: wrap;              /* позволяет перенос на узких экранах */
}

/* Ряд с гистограммами */
.bars-container{
  flex: 1 1 auto;
  display: flex;
  gap: 16px;
  align-items: flex-start;
  justify-content: center;
  padding: 8px 10px;
  box-sizing: border-box;
  margin-top: 10px;
  flex-wrap: wrap;              /* тоже перенос */
}

/* Карточки должны быть резиновыми, а не фиксированные 320px */
.gauge-card,
.bar-card{
  /* ширина «зажата» между минимумом и максимумом и растёт от окна */
  width: clamp(280px, 48vw, 640px);
  flex: 1 1 clamp(280px, 48vw, 640px);
  background:#222;
  border-radius:12px;
  padding:12px 16px 14px;
  box-shadow:0 2px 10px rgba(0,0,0,.35);
}

/* Заголовки и сами SVG уже тянутся за счёт width:100% и viewBox */
.gauge-svg,
.mini-svg{
  width: 100%;
  height: auto;                 /* высота следует из viewBox */
  display: block;
}

/* (опционально) — если хочешь фиксированную толщину линий при масштабировании
.gauge-track, .gauge-progress{ vector-effect: non-scaling-stroke; }
*/

</style>
<!-- Ряд с двумя отдельными карточками-гистограммами -->
<div class="bars-container">
  <div class="bar-card">
    <div class="mini-title">Гистограмма — Котлы</div>
    <svg id="bars-left" class="mini-svg"></svg>
  </div>
  <div class="bar-card">
    <div class="mini-title">Гистограмма — Турбины</div>
    <svg id="bars-right" class="mini-svg"></svg>
  </div>
</div>
<script>
  // ----- КОНСТАНТНЫЕ ДАННЫЕ (правь как нужно) -----
  const LEFT_BARS = [
    { label: 'Показатель A', value: 72 },
    { label: 'Показатель B', value: 45 },
    { label: 'Показатель C', value: 88 },
    { label: 'Показатель D', value: 31 },
    { label: 'Показатель E', value: 64 },
    { label: 'Показатель F', value: 53 },
  ];
  const RIGHT_BARS = [
    { label: 'Показатель A', value: 25 },
    { label: 'Показатель B', value: 90 },
    { label: 'Показатель C', value: 61 },
    { label: 'Показатель D', value: 77 },
    { label: 'Показатель E', value: 34 },
    { label: 'Показатель F', value: 55 },
  ];

  // ----- плавный цвет от красного к зелёному по значению 0..100 -----
  const _interpRY = d3.interpolateRgb("#ff2d2d", "#ffd400");
  const _interpYG = d3.interpolateRgb("#ffd400", "#00d26a");
  function colorFor(v){
    const t = Math.max(0, Math.min(1, v/100));
    return t < 0.5 ? _interpRY(t*2) : _interpYG((t-0.5)*2);
  }

  // ----- минималистичная горизонтальная гистограмма -----
  // rows: [{label, value(0..100)}]
  function drawMiniBars(svgId, rows, opts={}){
    const svg = d3.select('#'+svgId);
    svg.selectAll('*').remove();

    const barH = opts.barHeight ?? 18;
    const gap  = opts.gap ?? 8;
    const padL = opts.leftPad ?? 96;   // место под подписи слева
    const padR = opts.rightPad ?? 40;  // место под числа справа
    const padT = 8, padB = 12;

    const W = 320; // ширина viewBox под карточку
    const innerW = W - padL - padR;
    const H = padT + rows.length*(barH+gap) - gap + padB;

    svg.attr('viewBox', `0 0 ${W} ${H}`);

    const x = d3.scaleLinear().domain([0,100]).range([0, innerW]);

    const g = svg.append('g').attr('transform', `translate(${padL},${padT})`);

    rows.forEach((d, i)=>{
      const y = i*(barH+gap);
      // фон
      g.append('rect')
        .attr('class','bar-track')
        .attr('x',0).attr('y',y)
        .attr('width', innerW).attr('height', barH)
        .attr('rx', barH/2).attr('ry', barH/2);
      // заливка
      g.append('rect')
        .attr('class','bar-fill')
        .attr('x',0).attr('y',y)
        .attr('width', x(d.value)).attr('height', barH)
        .attr('fill', colorFor(d.value))
        .attr('rx', barH/2).attr('ry', barH/2);
    });

    // подписи слева
    const labels = svg.append('g').attr('transform', `translate(${padL-8},${padT})`);
    labels.selectAll('text').data(rows).enter().append('text')
      .attr('class','bar-label')
      .attr('x',0)
      .attr('y', (_,i)=> i*(barH+gap) + barH/2 + .5)
      .text(d=>d.label);

    // значения %
    const vals = svg.append('g').attr('transform', `translate(${padL},${padT})`);
    vals.selectAll('text').data(rows).enter().append('text')
      .attr('class','bar-value')
      .attr('x', d=>{
        const w = x(d.value);
        return w > 40 ? w - 8 : w + 8; // если полоса длинная — текст внутри, иначе снаружи
      })
      .attr('y', (_,i)=> i*(barH+gap) + barH/2 + .5)
      .attr('text-anchor', d=> x(d.value) > 40 ? 'end' : 'start')
      .text(d=> `${Math.round(d.value)}%`);
  }

  // ----- рисуем две независимые гистограммы (на отдельных карточках) -----
  drawMiniBars('bars-left',  LEFT_BARS);
  drawMiniBars('bars-right', RIGHT_BARS);
</script>

