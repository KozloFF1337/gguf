function drawGauge(svgId, value, { start = -Math.PI/2, end = Math.PI/2, orient = 'auto' } = {}){
  const svg = d3.select('#'+svgId);
  svg.selectAll('*').remove();

  // Геометрия
  const W = 320, H = 180;
  const cx = W/2;
  const rOuter = (W/2) - 1;
  const thickness = 28;
  const rInner = rOuter - thickness;
  const cy = rOuter + 10;

  // Кламп значения
  const v = Math.max(0, Math.min(100, value));

  // Группа в центре — ВСЁ рисуем внутри неё (градиент тоже в её системе)
  const gRoot = svg.append('g').attr('transform', `translate(${cx},${cy})`);

  // --- Градиент в ЛОКАЛЬНЫХ координатах (ось X: -r..+r, ось Y: -r..+r) ---
  const defs = svg.append('defs');
  const gradId = `grad-${svgId}`;

  // Вычисление ориентации «авто» в лок.координатах
  function inRange(a,b,x){ return a<=x && x<=b; }
  let minX = Math.min(Math.cos(start), Math.cos(end));
  let maxX = Math.max(Math.cos(start), Math.cos(end));
  let minY = Math.min(Math.sin(start), Math.sin(end));
  let maxY = Math.max(Math.sin(start), Math.sin(end));

  // критические углы для экстремумов
  const candX = [start,end];
  if (inRange(start,end,0)) candX.push(0);
  if (inRange(start,end,Math.PI)) candX.push(Math.PI);

  const candY = [start,end];
  if (inRange(start,end,-Math.PI/2)) candY.push(-Math.PI/2);
  if (inRange(start,end, Math.PI/2)) candY.push( Math.PI/2);

  minX = Math.min(...candX.map(a=>Math.cos(a)));
  maxX = Math.max(...candX.map(a=>Math.cos(a)));
  minY = Math.min(...candY.map(a=>Math.sin(a)));
  maxY = Math.max(...candY.map(a=>Math.sin(a)));

  // масштабируем на радиус
  minX *= rOuter; maxX *= rOuter;
  minY *= rOuter; maxY *= rOuter;

  let useVertical = orient === 'vertical' ? true
                   : orient === 'horizontal' ? false
                   : (Math.abs(maxX - minX) < Math.abs(maxY - minY)); // авто

  const g = defs.append('linearGradient')
    .attr('id', gradId)
    .attr('gradientUnits', 'userSpaceOnUse');

  if (useVertical){
    // сверху (красный) -> вниз (зелёный)
    g.attr('x1', 0).attr('y1', minY)
     .attr('x2', 0).attr('y2', maxY);
  } else {
    // слева (красный) -> направо (зелёный)
    g.attr('x1', minX).attr('y1', 0)
     .attr('x2', maxX).attr('y2', 0);
  }

  g.append('stop').attr('offset','0%').attr('stop-color','#ff2d2d');   // красный
  g.append('stop').attr('offset','50%').attr('stop-color','#ffd400');  // жёлтый
  g.append('stop').attr('offset','100%').attr('stop-color','#00d26a'); // зелёный

  // Шкала угла
  const scale = d3.scaleLinear().domain([0,100]).range([start, end]);

  // Фон дуги
  gRoot.append('path')
    .attr('d', d3.arc().innerRadius(rInner).outerRadius(rOuter).startAngle(start).endAngle(end))
    .attr('fill', '#3a3a3a');

  // Значение
  gRoot.append('path')
    .attr('d', d3.arc().innerRadius(rInner).outerRadius(rOuter).startAngle(start).endAngle(scale(v)))
    .attr('fill', `url(#${gradId})`);

  // (опционально) число по центру — можно убрать
  gRoot.append('text')
    .attr('x', 0).attr('y', -10)
    .attr('text-anchor','middle').attr('fill','#fff')
    .attr('font-family','sans-serif').attr('font-size','28px').attr('font-weight','700')
    .text(`${Math.round(v)}%`);
}
