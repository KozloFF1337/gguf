@using Newtonsoft.Json; 

@{
    ViewData["Title"] = "Альтаир Рейтинг";
}

@model Altair.Models.VisualisationViewModel

<head>
    <meta charset="UTF-8">
    <title>Treemap Visualization</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js"></script>
    <style>
        .rating-container {
        margin-left: 5px;
        margin-bottom: 5px;
        width: calc(12% + 40px);
        float: left;
        padding: 10px;
        padding-top: 0;
        background-color: #222;
        color: #fff;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
        font-family: sans-serif;
        font-size: 14px;
        line-height: 1.4;
        }
    body {
        display: flex;
        justify-content: space-between;
        background-color: black;
        color: white;
        font-family: sans-serif;
        }
    .rating-card {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
    padding: 10px;
    background-color: #333;
    border-radius: 5px;
    box-shadow: 0 1px 5px rgba(0, 0, 0, 0.2);
    transition: transform 0.3s ease;
    cursor: pointer;
    }
    .rating-info {
        display: flex;
        align-items: center;
        flex-grow: 1;
    }
    .radio-btn {
        margin-left: 10px;
        cursor: pointer;
        transform: scale(1);
        transform-origin: center;
    }
    .radio-btn input {
        cursor: pointer;
    }
    .rating-card:nth-child(even) {
        background-color: #2a2a2a;
    }
    .rank-number {
        font-weight: bold;
        color: #fff;
        font-size: 16px;
        margin-right: 10px;
    }
    .user-name {
        font-style: normal;
        font-size: 16px;
        color: #dddddd;
    }
    .score-value-0 {
        margin-left: 4px;
        font-size: 16px;
        font-weight: bold;
        color: #5d5d5d;
    }
    .score-value-1 {
        margin-left: 4px;
        font-size: 16px;
        font-weight: bold;
        color: #8B0000;
    }
    .score-value-2 {
        margin-left: 4px;
        font-size: 16px;
        font-weight: bold;
        color: #c5172c;
    }
    .score-value-3 {
        margin-left: 4px;
        font-size: 16px;
        font-weight: bold;
        color: #FF0000;
    }
    .score-value-4 {
        margin-left: 4px;
        font-size: 16px;
        font-weight: bold;
        color: #009F00;
    }
    .score-value-5 {
        margin-left: 4px;
        font-size: 16px;
        font-weight: bold;
        color: #006400;
    }    
    .tooltip {
    position: absolute;
    background-color: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 8px;
    z-index: 1000;
    opacity: 0;
    transition: opacity 0.01s ease-in-out;
    pointer-events: none;
    }
    #sidebar {
        grid-column-start: span 1;
        align-self: start;
        width: calc(10% + 20px);
        margin-left: 10px;
    }
    .rating-card:hover {
        transform: scale(1.02);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        background-color: #3a3a3a !important;
    }

    .main-container {
    display: flex;
    }
    .graph-container {
            width: 100%;    
            text-align: center; /* Центрируем содержимое */    
            box-sizing: border-box;    
            margin-left: 4px;
            }

    h2 {
            color: #dddddd;    
            font-size: 30px;    
            margin-top: 0;    
            margin-bottom: 4px;    
            display: inline-block; /* Чтобы text-align:center работал правильно */
            }

    .node rect {
        stroke-width: 1px;
        fill-opacity: 1;
    }
    
    text.centered-text {
        font-size: 16px;
        dominant-baseline: middle;
        pointer-events: none;
        text-anchor: middle;
    }
    select {
    width: 90px;
    height: 40px;
    border: none;
    border-radius: 5px;
    background-color: #333;
    color: #b3b3b3;
    font-size: 16px;
    text-align: center;
    color: #dddddd;
    padding: 0 0px;
    cursor: pointer;
    transition: background-color 0.3s ease-in-out, color 0.3s ease-in-out;
    }

    select:hover {
        background-color: #444;
        color: #fd817e;
    }

    select:focus {
        outline: none;
        box-shadow: 0 0 5px rgba(253, 129, 126, 0.5);
    }
    </style>
</head>
<body>
    <div style="margin-top: 5px;">
        <div style="display:flex; width: 100%;"> <!-- Добавил width: 100% -->
            <div style="flex: 1; display: flex; flex-direction: column;"> <!-- Изменил структуру -->
                <div class="graph-container" id="treemap-left" style="text-align: center;">
                    <h2 style="margin-bottom: 4px; display: inline-block;">Котлы</h2>
                </div>
                <div class="graph-container" id="treemap-right" style="text-align: center;">
                    <h2 style="margin-bottom: 4px; display: inline-block;">Турбины</h2>
                </div>
            </div>
            <div class="rating-container">
                <div><h2 style="margin-bottom: 10px;margin-top: 5px;">Рейтинг:</h2><select style="float: right;margin-top: 5px;" id="periodSelect" onchange="reloadPage()">
                    <option value="week">Неделя</option>
                    <option value="month">Месяц</option>
                    <option value="year">Год</option>
                </select> </div>
            </div>
        </div>
    </div>
    
    <div id="tooltip" class="tooltip"></div> <!-- Специальный элемент для всплывающей подсказки -->

    <script>
        function reloadPage() {
            const selectedPeriod = document.getElementById('periodSelect').value;
            const url = `@Url.Action("Visualisation", "Home")?selectedPeriod=${selectedPeriod}`;
            window.location.href = url;
        }
    </script>

    <script>
        const stations = {
            25: `РГРЭС`,   // для Рефтинской
            9: `ТУГРЭС`,    // для Томь-Усинской
            15: `БГРЭС`,   // для Беловской
            1: `НГРЭС`,    // для Назаровской
            24: `КГРЭС2`,   // для Красноярской-2
            26: `ПГРЭС`,    // для Приморской
            14: `КЕМТЭЦ`,
            3: `Н-КЕМТЭЦ`,
            6: `БАРТЭЦ-2`,
            7: `БАРТЭЦ-3`,
            22: `БИЙТЭЦ`,
            4: `КРАТЭЦ-1`,
            2: `КРАТЭЦ-2`,
            12: `КРАТЭЦ-3`,
            13: `КАНТЭЦ`,
            8: `АБАТЭЦ`,
            17: `НСИБТЭЦ-2`,
            18: `НСИБТЭЦ-3`,
            19: `НСИБТЭЦ-4`,
            20: `НСИБТЭЦ-5`,
            21: `БАРАБТЭЦ`
        };
        const stationLinks = {
            25: 'https://powerbi-rs.suek.ru/reports/powerbi/Analytics/%D0%9F%D0%B5%D1%80%D0%B5%D0%B6%D0%BE%D0%B3%D0%B8/%D0%9A%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8C%20%D1%80%D0%B5%D0%B6%D0%B8%D0%BC%D0%B0/%D0%9A%D1%83%D0%B7%D0%B1%D0%B0%D1%81%D1%81%D0%BA%D0%B8%D0%B9%20%D1%84%D0%B8%D0%BB%D0%B8%D0%B0%D0%BB/%D0%9A%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8C%20%D1%80%D0%B5%D0%B6%D0%B8%D0%BC%D0%B0%20%D0%A0%D0%B5%D1%84%D0%93%D0%A0%D0%AD%D0%A1',   // для Рефтинской
            9: 'https://powerbi-rs.suek.ru/reports/powerbi/Analytics/%D0%9F%D0%B5%D1%80%D0%B5%D0%B6%D0%BE%D0%B3%D0%B8/%D0%9A%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8C%20%D1%80%D0%B5%D0%B6%D0%B8%D0%BC%D0%B0/%D0%9A%D1%83%D0%B7%D0%B1%D0%B0%D1%81%D1%81%D0%BA%D0%B8%D0%B9%20%D1%84%D0%B8%D0%BB%D0%B8%D0%B0%D0%BB/%D0%9A%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8C%20%D1%80%D0%B5%D0%B6%D0%B8%D0%BC%D0%B0%20%D0%A2%D0%A3%D0%93%D0%A0%D0%ЭС',    // для Томь-Усинской
            15: 'https://powerbi-rs.suek.ru/reports/powerbi/Analytics/%D0%9F%D0%B5%D1%80%D0%B5%D0%B6%D0%BE%D0%B3%D0%B8/%D0%9A%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8C%20%D1%80%D0%B5%D0%B6%D0%B8%D0%BC%D0%B0/%D0%9A%D1%83%D0%B7%D0%B1%D0%B0%D1%81%D1%81%D0%BA%D0%B8%D0%B9%20%D1%84%D0%B8%D0%BB%D0%B8%D0%B0%D0%BB/%D0%9A%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8C%20%D1%80%D0%B5%D0%B6%D0%B8%D0%BC%D0%B0%20%D0%91%D0%B5%D0%BB%D0%93%D0%A0%D0%ЭС',   // для Беловской
            1: 'https://powerbi-rs.suek.ru/reports/powerbi/Analytics/%D0%9F%D0%B5%D1%80%D0%B5%D0%B6%D0%BE%D0%B3%D0%B8/%D0%9A%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8C%20%D1%80%D0%B5%D0%B6%D0%B8%D0%BC%D0%B0/%D0%9A%D1%80%D0%B0%D1%81%D0%BD%D0%BE%D1%8F%D1%80%D1%81%D0%BA%D0%B8%D0%B9%20%D1%84%D0%B8%D0%BB%D0%B8%D0%B0%D0%BB/%D0%9A%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8C%20%D1%80%D0%B5%D0%B6%D0%B8%D0%BC%D0%B0%20%D0%9D%D0%93%D0%A0%D0%ЭС',    // для Назаровской
            24: 'https://powerbi-rs.suek.ru/reports/powerbi/Analytics/%D0%9F%D0%B5%D1%80%D0%B5%D0%B6%D0%BE%D0%B3%D0%B8/%D0%9A%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8C%20%D1%80%D0%B5%D0%B6%D0%B8%D0%BC%D0%B0/%D0%9A%D1%80%D0%B0%D1%81%D0%BD%D0%BE%D1%8F%D1%80%D1%81%D0%BA%D0%B8%D0%B9%20%D1%84%D0%B8%D0%BB%D0%B8%D0%B0%D0%BB/%D0%9A%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8C%20%D1%80%D0%B5%D0%B6%D0%B8%D0%BC%D0%B0%20%D0%9A%D0%93%D0%A0%D0%ЭС-2',   // для Красноярской-2
            26: 'https://powerbi-rs.suek.ru/reports/powerbi/Analytics/%D0%9F%D0%B5%D1%80%D0%B5%D0%B6%D0%BE%D0%B3%D0%B8/%D0%9A%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8C%20%D1%80%D0%B5%D0%B6%D0%B8%D0%BC%D0%B0/%D0%9A%D1%83%D0%B7%D0%B1%D0%B0%D1%81%D1%81%D0%BA%D0%B8%D0%B9%20%D1%84%D0%B8%D0%BB%D0%B8%D0%B0%D0%BB/%D0%9A%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8C%20%D1%80%D0%B5%D0%B6%D0%B8%D0%BC%D0%B0%20%D0%9F%D0%A0%D0%93%D0%A0%D0%ЭС',    // для Приморской
            14: `КЕМТЭЦ`,
            3: `Н-КЕМТЭЦ`,
            6: `БАРТЭЦ-2`,
            7: `БАРТЭЦ-3`,
            22: `БИЙТЭЦ`,
            4: `КРАТЭЦ-1`,
            2: `КРАТЭЦ-2`,
            12: `КРАТЭЦ-3`,
            13: `КАНТЭЦ`,
            8: `АБАТЭЦ`,
            17: `НСИБТЭЦ-2`,
            18: `НСИБТЭЦ-3`,
            19: `НСИБТЭЦ-4`,
            20: `НСИБТЭЦ-5`,
            21: `БАРАБТЭЦ`
        };
        const rgres_kpdvalues = {
            "01А": 90.28,
            "01Б": 89.9,
            "02А": 91.41,
            "02Б": 91.28,
            "03А": 90.07,
            "03Б": 89.37,
            "04А": 92.08,
            "04Б": 91.85,
            "05А": 91.63,
            "05Б": 91.7,
            "06А": 88.28,
            "06Б": 88.54,
            "07": 91.37,
            "08": 91.68,
            "09": 90.61,
            "10": 90.42
        };
        const rgres_urtvalues = {
            "1": 1930.4,
            "2": 2006.3,
            "3": 1966.9,
            "4": 1941.6,
            "5": 1880.3,
            "6": 1949.3,
            "7": 1982.2,
            "8": 1950.7,
            "9": 1932.2,
            "10": 1925.7
        };
        const tugres_kpdvalues = {
            "01": 90.86,
            "02": 90.93,
            "03": 90.94,
            "04": 90.18,
            "05": 90.95,
            "06": 90.8,
            "07": 88.76,
            "08": 88.36,
            "09": 89.21,
            "10": 89.9,
            "11": 90.92,
            "12": 91.16,
            "13А": 90.66,
            "13Б": 91.83,
            "14А": 89.32,
            "14Б": 90.77
        };
        const tugres_urtvalues = {
            "1": 2476,
            "2": 2295,
            "3": 2282,
            "4": 2142,
            "5": 2110,
            "6": 2058,
            "7": 2031,
            "8": 2148,
            "9": 2081
        };
        const bgres_kpdvalues = {
            "01А": 90.6,
            "01Б": 90.15,
            "02А": 90.26,
            "02Б": 90.79,
            "03А": 89.86,
            "03Б": 90.62,
            "04А": 89.97,
            "04Б": 88.92,
            "05А": 90.25,
            "05Б": 90.32,
            "06А": 89.45,
            "06Б": 89.03
        };
        const bgres_urtvalues = {
            "1": 2004,
            "2": 2060,
            "3": 2048,
            "4": 2039,
            "5": 2102,
            "6": 1953
        };
        const ngres_kpdvalues = {
            "01А": 91.73,
            "01Б": 89.06,
            "02А": 87.93,
            "02Б": 88.18,
            "03А": 90.46,
            "03Б": 90.91,
            "04А": 91.06,
            "04Б": 89.07,
            "05А": 89.48,
            "05Б": 87.58,
            "06А": 89.85,
            "06Б": 88.58,
            "07А": 87.92,
            "07Б": 88.93
        };
        const ngres_urtvalues = {
            "1": 2360.8,
            "2": 2176.66,
            "3": 2261.85,
            "4": 2225.64,
            "5": 2295.6,
            "6": 2280.1,
            "7": 1934
        };
        const kgres2_kpdvalues = {
            "01А": 91.42,
            "01Б": 91.77,
            "02А": 91.58,
            "02Б": 91.97,
            "03А": 91.58, //нет данных
            "03Б": 91.97, //нет данных
            "04А": 91.7,
            "04Б": 89.54,
            "05А": 89.13,
            "05Б": 91.73,
            "06А": 91.9,
            "06Б": 92.03,
            "07А": 91.89,
            "07Б": 91.56,
            "08А": 92.55,
            "08Б": 91.72,
            "09А": 89.93, //нет данных
            "09Б": 89.93,
            "10А": 90.38,
            "10Б": 88.83
        };
        const kgres2_urtvalues = {
            "1": 2198.3,
            "2": 2228.8,
            "3": 2228.8, //нет данных
            "4": 2228.8, //нет данных
            "5": 1833.3,
            "6": 2174.5,
            "7": 2174.5, //нет данных
            "8": 2085.2,
            "9": 2423.6,
            "10": 2423.6 //нет данных
        };
        const pgres_kpdvalues = {
            "01А": 84.35,
            "01Б": 83.62,
            "02А": 83.62, //нет данных
            "02Б": 83.62, //нет данных
            "03А": 83.62, //нет данных
            "03Б": 83.62, //нет данных
            "04А": 83.7,
            "04Б": 84.7,
            "05": 87.14,
            "06": 87.14, //нет данных
            "07": 87.14, //нет данных
            "08": 78.4,
            "09": 83.62 //нет данных
        };
        const pgres_urtvalues = {
            "1": 2252.83,
            "2": 2252.83, //нет данных
            "3": 2252.83, //нет данных
            "4": 2371,
            "5": 2089,
            "6": 2005.5, 
            "7": 1986.2, //нет данных
            "8": 1986.2,
            "9": 1914.2
        };
        const test_kpdvalues = {
            "01M": 0,
            "02M": 0, //нет данных
            "03M": 0, //нет данных
            "04M": 0,
            "05M": 0,
            "06M": 0, 
            "07M": 0, //нет данных
            "08M": 0,
            "09M": 0,
            "10M": 0,
            "11M": 0, //нет данных
            "12M": 0,
            "13M": 0, //нет данных
            "14M": 0,
            "15M": 0,
            "16M": 0, 
            "17M": 0, //нет данных
            "18M": 0,
            "19M": 0,
            "01": 0,
            "02": 0, //нет данных
            "03": 0, //нет данных
            "04": 0,
            "05": 0,
            "06": 0, 
            "07": 0, //нет данных
            "08": 0,
            "09": 0,
            "10": 0,
            "11": 0, //нет данных
            "12": 0,
            "13": 0, //нет данных
            "14": 0,
            "15": 0,
            "16": 0, 
            "17": 0, //нет данных
            "18": 0,
            "19": 0,
            "01А": 0,
            "02А": 0, //нет данных
            "03А": 0, //нет данных
            "04А": 0,
            "05А": 0,
            "06А": 0, 
            "07А": 0, //нет данных
            "08А": 0,
            "09А": 0,
            "10А": 0,
            "11А": 0, //нет данных
            "12А": 0,
            "13А": 0, //нет данных
            "14А": 0,
            "15А": 0,
            "16А": 0, 
            "17А": 0, //нет данных
            "18А": 0,
            "19А": 0,
            "01Б": 0,
            "02Б": 0, //нет данных
            "03Б": 0, //нет данных
            "04Б": 0,
            "05Б": 0,
            "06Б": 0, 
            "07Б": 0, //нет данных
            "08Б": 0,
            "09Б": 0,
            "10Б": 0,
            "11Б": 0, //нет данных
            "12Б": 0,
            "13Б": 0, //нет данных
            "14Б": 0,
            "15Б": 0,
            "16Б": 0, 
            "17Б": 0, //нет данных
            "18Б": 0,
            "19Б": 0
        };
        const test_urtvalues = {
            "1": 0,
            "2": 0, //нет данных
            "3": 0, //нет данных
            "4": 0,
            "5": 0,
            "6": 0, 
            "7": 0, //нет данных
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0, //нет данных
            "12": 0,
            "13": 0, //нет данных
            "14": 0,
            "15": 0,
            "16": 0, 
            "17": 0, //нет данных
            "18": 0,
            "19": 0
        };
        const kpdvalues = {
            25: rgres_kpdvalues,   // для Рефтинской
            9: tugres_kpdvalues,    // для Томь-Усинской
            15: bgres_kpdvalues,   // для Беловской
            1: ngres_kpdvalues,    // для Назаровской
            24: kgres2_kpdvalues,   // для Красноярской-2
            26: pgres_kpdvalues,    // для Приморской
            14: test_kpdvalues,
            3: test_kpdvalues,
            6: test_kpdvalues,
            7: test_kpdvalues,
            22: test_kpdvalues,
            4: test_kpdvalues,
            2: test_kpdvalues,
            12: test_kpdvalues,
            13: test_kpdvalues,
            8: test_kpdvalues,
            17: test_kpdvalues,
            18: test_kpdvalues,
            19: test_kpdvalues,
            20: test_kpdvalues,
            21: test_kpdvalues
        }; 
        const urtvalues = {
            25: rgres_urtvalues,   // для Рефтинской
            9: tugres_urtvalues,    // для Томь-Усинской
            15: bgres_urtvalues,   // для Беловской
            1: ngres_urtvalues,    // для Назаровской
            24: kgres2_urtvalues,   // для Красноярской-2
            26: pgres_urtvalues,    // для Приморской
            14: test_urtvalues,
            3: test_urtvalues,
            6: test_urtvalues,
            7: test_urtvalues,
            22: test_urtvalues,
            4: test_urtvalues,
            2: test_urtvalues,
            12: test_urtvalues,
            13: test_urtvalues,
            8: test_urtvalues,
            17: test_urtvalues,
            18: test_urtvalues,
            19: test_urtvalues,
            20: test_urtvalues,
            21: test_urtvalues
        };
        // Берём данные из C# и превращаем их в пригодный для D3.js формат
    const turbinsData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Turbins));
    const boilersData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Boilers));
        // Форматируем данные в иерархическом виде
        const hierarchicalData_turbin = {
            name: "Turbines",
            children: turbinsData.map(item => ({
                urt: item.URT,
                size: item.Consumption,
                station: item.StationID,
                turbin: item.TurbinID,
                urt_percent: (((item.URT - (urtvalues[item.StationID][parseInt(item.TurbinID)] > 0 ? urtvalues[item.StationID][parseInt(item.TurbinID)] : 2300)) / item.URT) * 100), // Новое поле с вычисленным значением
                urt_percent_normal: urtvalues[item.StationID][parseInt(item.TurbinID)] > 0 ? urtvalues[item.StationID][parseInt(item.TurbinID)] : 2300
            }))
        };
        
        const hierarchicalData_boiler = {
    name: "Boilers",
    children: boilersData.map(item => {
        const stationID = item.StationID;
        const boilerID = item.BoilerID;
        
        // Логирование для отладки
        console.log('Processing boiler:', {
            stationID: stationID,
            boilerID: boilerID,
            stationName: stations[stationID] || 'Unknown station',
            hasKpdValues: kpdvalues.hasOwnProperty(stationID),
            kpdValuesForStation: kpdvalues[stationID] ? Object.keys(kpdvalues[stationID]) : 'No kpdvalues for station',
            hasBoilerInKpd: kpdvalues[stationID] ? kpdvalues[stationID].hasOwnProperty(boilerID) : false
        });

        // Проверяем существование данных
        if (!kpdvalues[stationID]) {
            console.error(`❌ No kpdvalues found for station ID: ${stationID} (${stations[stationID] || 'Unknown'})`);
            console.error(`Available stations in kpdvalues:`, Object.keys(kpdvalues));
        } else if (!kpdvalues[stationID].hasOwnProperty(boilerID)) {
            console.warn(`⚠️ No kpd value found for boiler ${boilerID} at station ${stationID} (${stations[stationID] || 'Unknown'})`);
            console.warn(`Available boilers for station ${stationID}:`, Object.keys(kpdvalues[stationID]));
        }

        const kpdValue = kpdvalues[stationID] ? kpdvalues[stationID][boilerID] : undefined;
        const baseKPD = kpdValue > 0 ? kpdValue : 91;
        const kpd_percent = (((item.KPD - baseKPD) / item.KPD) * 100);
        const kpd_percent_normal = baseKPD;

        return {
            kpd: item.KPD,
            size: item.Production,
            station: item.StationID,
            boiler: item.BoilerID,
            kpd_percent: kpd_percent,
            kpd_percent_normal: kpd_percent_normal
        };
    }) 
};

        // Объединяем данные и сортируем по StationID
        const combinedData = hierarchicalData_turbin.children.concat(hierarchicalData_boiler.children);
        
        
        // Функция для вычисления рейтинга
        function calculateRating(group) {
        const sumUrtPercent = group.reduce((acc, curr) => {
        const value = curr.urt_percent !== undefined ? curr.urt_percent : 0;
        return acc + parseFloat(value) * curr.size * -1;
        }, 0);

        const sumKpdPercent = group.reduce((acc, curr) => {
            const value = curr.kpd_percent !== undefined ? curr.kpd_percent : 0;
            return acc + parseFloat(value) * curr.size;
        }, 0);

        const totalSum = group.reduce((acc, curr) => acc + curr.size, 0);

        // Проверка на случай, если totalSum равен 0
        return totalSum !== 0 ? (sumUrtPercent + sumKpdPercent)*2 / totalSum : 0;

        }

        // Группируем данные по StationID
        const groupedData = {};
        combinedData.forEach(item => {
            if (!groupedData[item.station]) {
                groupedData[item.station] = [];
            }
            groupedData[item.station].push(item);
        });

        // Создаем массив объектов для рейтинга
        const ratings = Object.keys(groupedData).map(key => ({
            StationID: key,
            rating: calculateRating(groupedData[key])
        }));

        // Сортируем рейтинг по значению
        ratings.sort((a, b) => b.rating - a.rating);

        // Выбираем контейнер рейтинга
        const ratingContainer = d3.select('.rating-container');
        function selectColorForRating(rt) {
                    if (rt < 0) return 'score-value-3'; // Красный
                    if (rt >= 0 ) return 'score-value-4'; // Светло-зеленый
                    return 'score-value-0'; // Серый по умолчанию
                }

        // Обновленные функции highlightStation и resetHighlight
        function highlightStation(StationID) {
        // Затемняем все элементы и текст
        d3.selectAll(".node rect")
        .style("opacity", 0.3);
        d3.selectAll(".node text")
        .style("opacity", 0.3);

        // Подсвечиваем элементы выбранной станции
        d3.selectAll(".node")
            .filter(d => d.data && d.data.station == StationID)
            .select("rect")
            .style("opacity", 1);

        d3.selectAll(".node")
            .filter(d => d.data && d.data.station == StationID)
            .selectAll("text")
            .style("opacity", 1);

        }

        function resetHighlight() {
        // Возвращаем нормальную прозрачность всем элементам
        d3.selectAll(".node rect, .node text")
        .style("opacity", 1);
        }
        // Генерируем карточки рейтинга с радиокнопками
        ratings.forEach((rating, index) => {
            const cardDiv = ratingContainer.append('div')
                .attr('class', 'rating-card');
            // Левая часть - информация о станции
            const ratingInfo = cardDiv.append('div')
                .attr('class', 'rating-info')
                .on('click', function() {
                    window.open(stationLinks[rating.StationID], '_blank');
                });
            ratingInfo.append('span')
                .attr('class', 'rank-number')
                .text(index + 1 + '.');
            ratingInfo.append('span')
                .attr('class', 'user-name')
                .text(stations[rating.StationID]);
            ratingInfo.append('span')
                .attr('class', selectColorForRating(rating.rating))
                .text(`${rating.rating.toFixed(2)}%`);
            // Правая часть - радиокнопка
            const radioDiv = cardDiv.append('div')
                .attr('class', 'radio-btn')
                .on('click', function(e) {
                    e.stopPropagation();
                    highlightStation(rating.StationID);
                    // Помечаем выбранную радиокнопку
                    d3.selectAll('input[name="station"]').property('checked', false);
                    d3.select(this).select('input').property('checked', true);
                });
            radioDiv.append('input')
                .attr('type', 'radio')
                .attr('name', 'station')
                .attr('id', `station-${rating.StationID}`);
        }); 
        // Сбрасываем выделение при клике вне карточек
        document.addEventListener('click', function(e) {
            if (!e.target.closest('.rating-card')) {
                resetHighlight();
                d3.selectAll('input[name="station"]').property('checked', false);
            }
        });

        // Общая ширина окна
        const totalWidth = document.body.clientWidth; // Ограничиваем ширину
        const graphWidth = totalWidth - (totalWidth / 6.8) ; // Ширина одного графика (оставляем пространство между графиками)
        const height = window.innerHeight * 0.85;

        
        
        const tooltip = d3.select("#tooltip");

        // Функция для рисования одного treemap
            function drawTreemap_turbin(containerSelector, data) {
                const svg = d3.select(containerSelector).append("svg")
                            .attr("width", graphWidth)
                            .attr("height", height);

                // Hierarchy и обработка treemap
                const root = d3.hierarchy(data)
                            .sum(d => d.size)
                            .sort((a, b) => b.value - a.value);

                d3.treemap()
                .size([graphWidth, height])
                .padding(2)
                (root);

                // Создаем группы для всех узлов
                const cell = svg.selectAll(".node")
                                .data(root.leaves())
                                .enter().append("g")
                                .attr("transform", d => `translate(${d.x0}, ${d.y0})`)
                                .classed("node", true);

                // Прямоугольники
                cell.append("rect")
                .attr("width", d => d.x1 - d.x0)
                .attr("height", d => d.y1 - d.y0)
                .attr("class", "node-rect")
                .attr("fill", d => selectColorForURT(d.data.urt_percent !== undefined ? d.data.urt_percent : 100))
                .on("mouseenter", showTooltip) // Показываем подсказку при наведении
                .on("mousemove", moveTooltip) // Обновляем позицию подсказки
                .on("mouseleave", hideTooltip); // Скрываем подсказку при уходе мыши

                cell.filter(d => (d.x1 - d.x0) >= 30 && (d.y1 - d.y0) >= 30) // Только если ширина достаточна
                    .each(function(d) {
                        const g = d3.select(this);
                        const rectWidth = d.x1 - d.x0; // Ширина прямоугольника
                        const rectHeight = d.y1 - d.y0; // Высота прямоугольника
                        const textContent = `${stations[d.data.station]} ТА${d.data.turbin} ${d.data.urt_percent.toFixed(2)}%`;

                        // Вычислим оптимальное количество символов в строке
                        const MAX_CHARS_PER_LINE = Math.floor(rectWidth / 10); // Примерно 10 пикселей на символ
                        const lines = wrapText(textContent, MAX_CHARS_PER_LINE); // Функция разрыва строки

                        // Центруем текст по вертикали
                        const lineHeight = 16; // Средняя высота строки
                        const numLines = lines.length;
                        const yCenterOffset = ((numLines * lineHeight) - rectHeight) / 2;

                        // Добавляем текстовые строки
                        lines.forEach((line, index) => {
                            g.append("text")
                                .attr("class", "centered-text node-text")
                                .attr("x", (d.x1 - d.x0) / 2) // Х-центр блока
                                .attr("y", (index * lineHeight) - yCenterOffset + lineHeight/2 ) // Центрирование по вертикали
                                .attr("font-size", "12px") // Размер шрифта
                                .attr("font-weight", "bold") // Жирный шрифт
                                .attr("fill", "#dddddd") // Белый цвет текста
                                .attr("text-anchor", "middle") // Выравнивание по центру
                                .text(line);
                        });
                    });
                    function wrapText(text, maxCharsPerLine) {
                    const words = text.split(' ');
                    const wrappedLines = [];
                    let currentLine = '';

                    words.forEach(word => {
                        if ((currentLine + word).length > maxCharsPerLine && currentLine !== '') {
                            wrappedLines.push(currentLine.trim());
                            currentLine = word + ' ';
                        } else {
                            currentLine += word + ' ';
                        }
                    });

                    if (currentLine.trim()) {
                        wrappedLines.push(currentLine.trim());
                    }

                    return wrappedLines;
                }

                    // Переменная таймера для скрытия подсказки
                    let hideTimeout;

                    // Функции обработки подсказки
                    function showTooltip(event, d) {
                        const content = `
                            Станция: ${stations[d.data.station]}<br/>
                            Турбина: ${d.data.turbin}<br/>
                            УРТ: ${d.data.urt.toFixed(2)}<br/>
                            Норма УРТ: ${d.data.urt_percent_normal.toFixed(2)}<br/>
                            Расход тепла: ${d.data.size.toFixed(2)}
                        `;
                        
                        clearTimeout(hideTimeout);

                        // Определяем расстояние от нижнего края окна
                        const bottomSpace = window.innerHeight - event.pageY;
                            tooltip.html(content)
                                .style("opacity", 1)
                                .style("top", event.pageY - tooltip.node().offsetHeight + "px")
                                .style("left", event.pageX - 150 + "px");
                    }

                    function moveTooltip(event) {
                        // Здесь логика перемещения аналогична showTooltip,
                        // проверяя свободное пространство и меняя положение
                        const bottomSpace = window.innerHeight - event.pageY;

                            tooltip.style("top", event.pageY - tooltip.node().offsetHeight + "px");
                        tooltip.style("left", event.pageX - 150 + "px");
                    }

                    function hideTooltip() {
                        hideTimeout = setTimeout(() => {
                            tooltip.style("opacity", 0);
                        }, 50);
                    }
                    // Функция выбора цвета в зависимости от KPD
                    function selectColorForURT(urtValue) {
                        if (urtValue > 4) return '#8B0000'; // Красный
                        if (urtValue >= 2 && urtValue < 4) return '#BF0000'; // Красный
                        if (urtValue >= 0 && urtValue < 2) return '#c5172c'; // Оранжевый
                        if (urtValue >= -2 && urtValue < 0) return '#009F00'; // Светло-зеленый
                        if (urtValue < -2) return '#006400'; // Темно-зеленый
                        return '#DDDDDD'; // Серый по умолчанию
                    }
                }

            function drawTreemap_boiler(containerSelector, data) {
            const svg = d3.select(containerSelector).append("svg")
                           .attr("width", graphWidth)
                           .attr("height", height);

            // Hierarchy и обработка treemap
            const root = d3.hierarchy(data)
                           .sum(d => d.size)
                           .sort((a, b) => b.value - a.value);

            d3.treemap()
               .size([graphWidth, height])
               .padding(2)
               (root);

            // Создаем группы для всех узлов
            const cell = svg.selectAll(".node")
                             .data(root.leaves())
                             .enter().append("g")
                             .attr("transform", d => `translate(${d.x0}, ${d.y0})`)
                             .classed("node", true);
            // Прямоугольники
            cell.append("rect")
               .attr("width", d => d.x1 - d.x0)
               .attr("height", d => d.y1 - d.y0)
               .attr("class", "node-rect")
               .attr("fill", d => selectColorForKPD(d.data.kpd_percent))
               .on("mouseenter", showTooltip) // Показываем подсказку при наведении
               .on("mousemove", moveTooltip) // Обновляем позицию подсказки
               .on("mouseleave", hideTooltip); // Скрываем подсказку при уходе мыши
            // Добавляем текст, соблюдая ограничения и переносы
            cell.filter(d => (d.x1 - d.x0) >= 30 && (d.y1 - d.y0) >= 30) // Только если ширина достаточна
                .each(function(d) {
                    const g = d3.select(this);
                    const rectWidth = d.x1 - d.x0; // Ширина прямоугольника
                    const rectHeight = d.y1 - d.y0; // Высота прямоугольника
                    const textContent = `${stations[d.data.station]} КА${d.data.boiler} ${d.data.kpd_percent.toFixed(2)}%`;

                    // Вычислим оптимальное количество символов в строке
                    const MAX_CHARS_PER_LINE = Math.floor(rectWidth / 10); // Примерно 10 пикселей на символ
                    const lines = wrapText(textContent, MAX_CHARS_PER_LINE); // Функция разрыва строки

                    // Первоначальный размер шрифта
                    let fontSize = 12; // Исходный размер шрифта
                    let validFontSizeFound = false;

                    while (!validFontSizeFound && fontSize > 6) { // Пока не нашли подходящий размер и минимальный предел не достигнут
                        const testLines = wrapText(textContent, Math.floor(rectWidth / fontSize));
                        const isValid = testLines.every(line => line.length <= MAX_CHARS_PER_LINE);
                        if (isValid) {
                            validFontSizeFound = true;
                        } else {
                            fontSize--; // Уменьшаем размер шрифта на 1 пункт
                        }
                    }
                    
                    // Центруем текст по вертикали
                    const lineHeight = fontSize+4; // Средняя высота строки
                    const numLines = lines.length;
                    const yCenterOffset = ((numLines * lineHeight) - rectHeight) / 2;

                    // Добавляем текстовые строки
                    lines.forEach((line, index) => {
                        g.append("text")
                            .attr("class", "centered-text node-text")
                            .attr("x", (d.x1 - d.x0) / 2) // Х-центр блока
                            .attr("y", (index * lineHeight) - yCenterOffset + lineHeight/2 ) // Центрирование по вертикали
                            .attr("font-size", `${fontSize}px`) // Размер шрифта
                            .attr("font-family", "Arial") // Размер шрифта
                            .attr("font-weight", "bold") // Жирный шрифт
                            .attr("fill", "#dddddd") // Белый цвет текста
                            .attr("text-anchor", "middle") // Выравнивание по центру
                            .text(line);
                    });
                });

            // Вспомогательная функция для разрыва строки
            function wrapText(text, maxCharsPerLine) {
                const words = text.split(' ');
                const wrappedLines = [];
                let currentLine = '';

                words.forEach(word => {
                    if ((currentLine + word).length > maxCharsPerLine && currentLine !== '') {
                        wrappedLines.push(currentLine.trim());
                        currentLine = word + ' ';
                    } else {
                        currentLine += word + ' ';
                    }
                });

                if (currentLine.trim()) {
                    wrappedLines.push(currentLine.trim());
                }

                return wrappedLines;
            }
            
                let hideTimeout;
                            // Функции для всплывающих подсказок
                function showTooltip(event, d) {
                    const content = `
                        Станция: ${stations[d.data.station]}<br/>
                        Котёл: ${d.data.boiler}<br/>
                        КПД: ${d.data.kpd.toFixed(2)}<br/>
                        Норма КПД: ${d.data.kpd_percent_normal.toFixed(2)}<br/>
                        Выработка тепла: ${d.data.size.toFixed(2)}
                    `;
                    clearTimeout(hideTimeout);
                    tooltip.html(content)
                        .style("opacity", 1)
                        .style("top", event.pageY + 10 + "px")
                        .style("left", event.pageX - 150 + "px");
                }

                function moveTooltip(event) {
                    tooltip.style("top", event.pageY + 10 + "px")
                        .style("left", event.pageX - 150 + "px");
                }

                function hideTooltip() {
                    hideTimeout = setTimeout(() => {
                        tooltip.style("opacity", 0)
                    },50);
                }
                // Функция выбора цвета в зависимости от KPD
                function selectColorForKPD(kpdValue) {
                    if (kpdValue < -2) return '#8B0000'; // Красный
                    if (kpdValue >= -2 && kpdValue < -1) return '#BF0000'; // Красный
                    if (kpdValue >= -1 && kpdValue < 0) return '#c5172c'; // Оранжевый
                    if (kpdValue >= 0 && kpdValue < 1) return '#009F00'; // Светло-зеленый
                    if (kpdValue >= 1) return '#006400'; // Темно-зеленый
                    return '#DDDDDD'; // Серый по умолчанию
                }
            }

        // Отрисовываем левый график
        drawTreemap_turbin("#treemap-right", hierarchicalData_turbin);

        // Отрисовываем правый график (можно передать тот же или другой набор данных)
        drawTreemap_boiler("#treemap-left", hierarchicalData_boiler);

        document.getElementById('r_1').addEventListener('click', function () {
            window.location.href = '@Url.Action("Contacts", "Home")';
        });
        document.getElementById('r_2').addEventListener('click', function () {
            window.location.href = '@Url.Action("Index", "Home")';
        });
    </script>
</div>
</body>
